#!/usr/bin/env ruby

# add gem "clamp", ">= 0.2.3" to your bundle file if you use this
# clamp reference at https://github.com/mdub/clamp
require 'clamp'
require 'json'
require File.expand_path(File.dirname(__FILE__) + '/../config/boot')


class AccommodationCommand < Clamp::Command
  parameter "TRAVELLERS_JSON", "travellers JSON data file"
  parameter "ACCOMMODATION_JSON", "accommodation JSON data file"  
  parameter "ACCOMMODATION_ID", "Identifier of accommodation to display" do |s| 
    Integer(s)
  end
  
  def execute
    puts "travellers_json: #{travellers_json}"
    puts "accommodation_json: #{accommodation_json}"    
    puts "accommodation_id: #{accommodation_id}"
    puts "go do your stuff..."
  end
end


class TravellerCommand < Clamp::Command
  parameter "TRAVELLERS_JSON", "travellers JSON data file"
  parameter "ACCOMMODATION_JSON", "accommodation JSON data file"  
  parameter "TRAVELLER_ID", "Identifier of traveller to display" do |s| 
    Integer(s)
  end
  
  def execute
    puts "travellers_json: #{travellers_json}"
    puts "accommodation_json: #{accommodation_json}"    
    puts "traveller_id: #{traveller_id}"
    puts "go do your stuff..."
  end  
end


class SearchCommand < Clamp::Command
  parameter "TRAVELLERS_JSON", "travellers JSON data file" do |s|
    raise ArgumentError, "File <#{s}> does not exist" unless File.exists?(s)
    s
  end
  parameter "ACCOMMODATION_JSON", "accommodation JSON data file" do |s|
    raise ArgumentError, "File <#{s}> does not exist" unless File.exists?(s)
    s
  end
  parameter "MIN_PRICE", "Minimum price traveller wants to pay" do |s| 
    Integer(s)
  end
  parameter "MAX_PRICE", "Maximum price traveller wants to pay" do |s| 
    Integer(s)
  end
  parameter "REQUIREMENTS ...", "List of required attributes traveller desires"
  
  def execute
    file = File.read(accommodation_json)
    accommodation_data = JSON.parse(file)

    search_params = {
        :requirements => requirements_list,
        :price_min => min_price,
        :price_max => max_price
    }

    accommodation = LonelyPlanet::AccommodationSearch.search_accommodation(accommodation_data, search_params)

    puts 'Search Result'
    puts '---'
    puts "#{accommodation['name']}, #{accommodation['price']}"
  end  
end


class MainCommand < Clamp::Command
  subcommand "accommodation", "Find accommodation details including travellers booked there", AccommodationCommand
  subcommand "traveller", "Find traveller details showing where they are booked", TravellerCommand
  subcommand "search", "Search for suitable accommodation for a traveller", SearchCommand
end

MainCommand.run