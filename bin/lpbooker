#!/usr/bin/env ruby

# add gem "clamp", ">= 0.2.3" to your bundle file if you use this
# clamp reference at https://github.com/mdub/clamp
require 'clamp'
require 'json'
require File.expand_path(File.dirname(__FILE__) + '/../config/boot')


class AccommodationCommand < Clamp::Command
  parameter "TRAVELLERS_JSON", "travellers JSON data file" do |s|
    raise ArgumentError, "File <#{s}> does not exist" unless File.exists?("data/#{s}")
    "data/#{s}"
  end

  parameter "ACCOMMODATION_JSON", "accommodation JSON data file" do |s|
    raise ArgumentError, "File <#{s}> does not exist" unless File.exists?("data/#{s}")
    "data/#{s}"
  end

  parameter "ACCOMMODATION_ID", "Identifier of accommodation to display" do |s| 
    Integer(s)
  end
  
  def execute
    result = LonelyPlanet::CliManager.find_accommodation(travellers_json, accommodation_json, accommodation_id)

    puts result[:accommodation]
    puts '---'
    puts result[:guests]
  end
end


class TravellerCommand < Clamp::Command
  parameter "TRAVELLERS_JSON", "travellers JSON data file" do |s|
    raise ArgumentError, "File <#{s}> does not exist" unless File.exists?("data/#{s}")
    "data/#{s}"
  end

  parameter "ACCOMMODATION_JSON", "accommodation JSON data file" do |s|
    raise ArgumentError, "File <#{s}> does not exist" unless File.exists?("data/#{s}")
    "data/#{s}"
  end

  parameter "TRAVELLER_ID", "Identifier of traveller to display" do |s| 
    Integer(s)
  end
  
  def execute
    result = LonelyPlanet::CliManager.find_traveller(travellers_json, accommodation_json, traveller_id)

    puts result[:traveller]
    puts result[:booking]
  end
end


class SearchCommand < Clamp::Command
  parameter "TRAVELLERS_JSON", "travellers JSON data file" do |s|
    raise ArgumentError, "File <#{s}> does not exist" unless File.exists?("data/#{s}")
    "data/#{s}"
  end
  parameter "ACCOMMODATION_JSON", "accommodation JSON data file" do |s|
    raise ArgumentError, "File <#{s}> does not exist" unless File.exists?("data/#{s}")
    "data/#{s}"
  end
  parameter "MIN_PRICE", "Minimum price traveller wants to pay" do |s| 
    Integer(s)
  end
  parameter "MAX_PRICE", "Maximum price traveller wants to pay" do |s| 
    Integer(s)
  end
  parameter "REQUIREMENTS ...", "List of required attributes traveller desires"
  
  def execute
    result = LonelyPlanet::CliManager.find_availability(travellers_json, accommodation_json, min_price, max_price, requirements_list)

    puts result[:accommodation]
  end
end


class MainCommand < Clamp::Command
  subcommand "accommodation", "Find accommodation details including travellers booked there", AccommodationCommand
  subcommand "traveller", "Find traveller details showing where they are booked", TravellerCommand
  subcommand "search", "Search for suitable accommodation for a traveller", SearchCommand
end

MainCommand.run